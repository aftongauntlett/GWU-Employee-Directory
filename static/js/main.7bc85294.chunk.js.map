{"version":3,"sources":["components/Header/index.js","components/EmployeeCard/index.js","components/EmployeeList/Index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","EmployeeCard","src","this","props","user","picture","large","alt","name","first","last","cell","href","email","dob","age","EmployeeList","state","search","users","handleInputChange","event","setState","target","value","sortByName","sort","direction","sortByPhone","sortByEmail","sortByAge","axios","then","resp","data","results","console","log","_","orderBy","map","toLowerCase","includes","onChange","type","placeholder","Table","responsive","Button","variant","onClick","listEmployees","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7bc85294.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Header container-fluid\">\r\n        <h1>Employee Directory</h1>\r\n        <div>\r\n          Click the title to filter by ascending and descending order or use the\r\n          search box to narrow your results.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default class EmployeeCard extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>\r\n          <img src={this.props.user.picture.large} alt=\"Employee Photo\"></img>\r\n        </td>\r\n        <td className=\"employeeInfo\">\r\n          {this.props.user.name.first + \" \" + this.props.user.name.last}\r\n        </td>\r\n        <td className=\"employeeInfo\">{this.props.user.cell}</td>\r\n        <td className=\"employeeInfo\">\r\n          <a href={\"mailto:\" + this.props.user.email}>\r\n            {this.props.user.email}\r\n          </a>\r\n        </td>\r\n        <td className=\"employeeInfo\">{this.props.user.dob.age}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport EmployeeCard from \"../EmployeeCard\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport _ from \"lodash\";\r\nimport \"./styles.css\";\r\n\r\nexport default class EmployeeList extends Component {\r\n  state = {\r\n    search: \"\",\r\n    users: [],\r\n  };\r\n\r\n  // runs this function when employee list is mounted to the page\r\n  componentDidMount() {\r\n    axios(\"https://randomuser.me/api/?nat=us&results=20\").then((resp) => {\r\n      this.setState({ users: resp.data.results });\r\n      console.log(resp);\r\n    });\r\n  }\r\n\r\n  listEmployees() {\r\n    // add sorting here\r\n    let users = this.state.users;\r\n    users = _.orderBy(users, this.state.sort, this.state.direction);\r\n    return users.map((user) => {\r\n      if (user.name.first.toLowerCase().includes(this.state.search)) {\r\n        return <EmployeeCard user={user} />;\r\n      }\r\n    });\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({\r\n      search: event.target.value,\r\n    });\r\n  };\r\n\r\n  sortByName = () => {\r\n    if (this.state.sort === \"name.first\" && this.state.direction === \"asc\") {\r\n      this.setState({\r\n        direction: \"desc\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        sort: \"name.first\",\r\n        direction: \"asc\",\r\n      });\r\n    }\r\n  };\r\n\r\n  sortByPhone = () => {\r\n    if (this.state.sort === \"cell\" && this.state.direction === \"asc\") {\r\n      this.setState({\r\n        direction: \"desc\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        sort: \"cell\",\r\n        direction: \"asc\",\r\n      });\r\n    }\r\n  };\r\n\r\n  sortByEmail = () => {\r\n    if (this.state.sort === \"email\" && this.state.direction === \"asc\") {\r\n      this.setState({\r\n        direction: \"desc\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        sort: \"email\",\r\n        direction: \"asc\",\r\n      });\r\n    }\r\n  };\r\n\r\n  sortByAge = () => {\r\n    if (this.state.sort === \"dob.age\" && this.state.direction === \"asc\") {\r\n      this.setState({\r\n        direction: \"desc\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        sort: \"dob.age\",\r\n        direction: \"asc\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"employeeTable\">\r\n        <input\r\n          className=\"searchBar\"\r\n          value={this.state.search}\r\n          onChange={this.handleInputChange}\r\n          type=\"text\"\r\n          placeholder=\"Search First Name\"\r\n        />\r\n        <Table responsive>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"tablePadding\">\r\n                <Button variant=\"dark\">Photo</Button>\r\n              </th>\r\n              <th className=\"tablePadding\">\r\n                <Button variant=\"dark link\" onClick={this.sortByName}>\r\n                  Name\r\n                </Button>\r\n              </th>\r\n              <th className=\"tablePadding\">\r\n                <Button variant=\"dark link\" onClick={this.sortByPhone}>\r\n                  Phone\r\n                </Button>\r\n              </th>\r\n              <th className=\"tablePadding\">\r\n                <Button variant=\"dark link\" onClick={this.sortByEmail}>\r\n                  Email\r\n                </Button>\r\n              </th>\r\n              <th className=\"tablePadding\">\r\n                <Button variant=\"dark link\" onClick={this.sortByAge}>\r\n                  Age\r\n                </Button>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.listEmployees()}</tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./css/App.css\";\r\nimport Header from \"./components/Header\";\r\nimport EmployeeList from \"./components/EmployeeList/Index\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <EmployeeList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}